age_input = "36 - 45"
survdt_m = readRDS("survdt_m.rds")
load("elastic.glm.v4.Rdata")
load("backup_model_v2.Rdata")
load("100_genes.rdata")
immune_elastic = readRDS("elastic_model_immune.RDS")
train_immune = readRDS("immune_gene_final_edit.RDS")
immune_status = readRDS("immune_status.rds")
edited_immune_elastic = readRDS("edited_elastic_model_immune.RDS")
user_survdt = survdt_m %>% dplyr::filter(
Gender == gender_input,
Age == age_input
)
user_kmcurve <- survfit(Surv(C2daystodnDSA, C2dnDSA) ~ Eplet2MM, data = user_survdt)
legend_title <- function(gender_input, age_input) {
legend_title = paste(gender_input, ":", age_input, "y.o.")
return(legend_title)
}
ggsurv <- ggsurvplot(
user_kmcurve, # survfit object with calculated statistics.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
palette = c("#E7B800", "#2E9FDF"),
caption = "Data Provided by Dr. Germain Wong (University of Sydney) \n DSA = Donor Specific Antibody",
ggtheme = theme_bw(), # customize plot and risk table with a theme.
risk.table.y.text.col = T,# colour risk table text annotations.
risk.table.height = 0.25, # the height of the risk table
risk.table.y.text = FALSE,# show bars instead of names in text annotations
# in legend of risk table.
surv.median.line = "hv",  # add the median survival pointer.
xlab = "Time (Years)",
ylab = "Estimated Probability",
subtitle = legend_title(gender_input, age_input),
title = "Estimated Probability for Class II de novo DSA Appearance",
font.title = c(16, "bold", "darkblue"),
font.x = c(14, "bold", "red"),
font.y = c(14, "bold", "darkred"),
font.tickslab = c(12, "bold"),
font.subtitle = c(12, "bold"),
legend = "top",
legend.title = "Donor Mismatches",
legend.labs = c(" < 30 Mismatches", " > 30 Mismatches")
)
ggsurv$plot = ggsurv$plot +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5))
ggsurv
mean_train<- mean(train_data_100)
inFile <- input$GeneData
mean_train<- mean(train_data_100)
inFile <- "./Patient_Data/GSM3406956_s2.txt"
#read.csv(inFile$datapath, header = input$header)
file<- read.delim(inFile, header = TRUE)
genes <- as.matrix(file[,1])
gse<- as.numeric(file[,-1])
gse<- data.matrix(gse)
rownames(gse) <- genes
counts <- gse
#getting the processed counts matrix
cpm_counts <- cpm(counts)
lcpm <- log2(cpm_counts+1)
data_counts<- normalizeQuantiles((lcpm))
#checks if ensemble id needs to be transformed
if (startsWith(genes[2], "E")){
rownames(data_counts) = sapply(strsplit(rownames(data_counts), ".", fixed=T), function(x) x[1])
symbols <- select(EnsDb.Hsapiens.v79, key= as.character(rownames(data_counts)), columns=c("SYMBOL"), keytype="GENEID")
df.gse<- as.data.frame(data_counts)
gse <- merge(df.gse, symbols, by.x = 0, by.y = 'GENEID', all.x = TRUE)
gene_symbols<- gse[,3]
data_counts <- as.matrix(gse[,2])
rownames(data_counts) <- gene_symbols
}
gender_input = "Male"
age_input = "36 - 45"
survdt_m = readRDS("survdt_m.rds")
load("elastic.glm.v4.Rdata")
load("backup_model_v2.Rdata")
load("100_genes.rdata")
immune_elastic = readRDS("elastic_model_immune.RDS")
train_immune = readRDS("immune_gene_final_edit.RDS")
immune_status = readRDS("immune_status.rds")
edited_immune_elastic = readRDS("edited_elastic_model_immune.RDS")
user_survdt = survdt_m %>% dplyr::filter(
Gender == gender_input,
Age == age_input
)
gender_input = "Male"
age_input = "36 - 45"
survdt_m = readRDS("survdt_m.rds")
load("elastic.glm.v4.Rdata")
load("backup_model_v2.Rdata")
load("100_genes.rdata")
immune_elastic = readRDS("elastic_model_immune.RDS")
train_immune = readRDS("immune_gene_final_edit.RDS")
immune_status = readRDS("immune_status.rds")
edited_immune_elastic = readRDS("edited_elastic_model_immune.RDS")
user_survdt = survdt_m %>% dplyr::filter(
Gender == gender_input,
Age == age_input
)
library(shiny)
library(GEOquery)
library(R.utils)
library(reshape2)
library(ggplot2)
library(tidyverse)
library(limma)
library(biomaRt)
library(ggbiplot)
library(factoextra)
library(caret)
library(glmnet)
library(DESeq2)
library(edgeR)
library(DEFormats)
library(ROCR)
library(pROC)
library(doParallel)
library(foreach)
library(DescTools)
library(ggthemes)
library(shinycssloaders)
library(shinydashboard)
library(class)
library(rsconnect)
library(BiocManager)
library(affy)
library(oligo)
# library(pd.mogene.2.0.st)
# library(mogene20sttranscriptcluster.db)
library(stringr)
# library(dashboardthemes)
library(survminer)
library(survival)
library(survMisc)
library(EnsDb.Hsapiens.v79)
options(repos = BiocManager::repositories())
gender_input = "Male"
age_input = "36 - 45"
survdt_m = readRDS("survdt_m.rds")
load("elastic.glm.v4.Rdata")
load("backup_model_v2.Rdata")
load("100_genes.rdata")
immune_elastic = readRDS("elastic_model_immune.RDS")
train_immune = readRDS("immune_gene_final_edit.RDS")
immune_status = readRDS("immune_status.rds")
edited_immune_elastic = readRDS("edited_elastic_model_immune.RDS")
user_survdt = survdt_m %>% dplyr::filter(
Gender == gender_input,
Age == age_input
)
user_kmcurve <- survfit(Surv(C2daystodnDSA, C2dnDSA) ~ Eplet2MM, data = user_survdt)
legend_title <- function(gender_input, age_input) {
legend_title = paste(gender_input, ":", age_input, "y.o.")
return(legend_title)
}
ggsurv <- ggsurvplot(
user_kmcurve, # survfit object with calculated statistics.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
palette = c("#E7B800", "#2E9FDF"),
caption = "Data Provided by Dr. Germain Wong (University of Sydney) \n DSA = Donor Specific Antibody",
ggtheme = theme_bw(), # customize plot and risk table with a theme.
risk.table.y.text.col = T,# colour risk table text annotations.
risk.table.height = 0.25, # the height of the risk table
risk.table.y.text = FALSE,# show bars instead of names in text annotations
# in legend of risk table.
surv.median.line = "hv",  # add the median survival pointer.
xlab = "Time (Years)",
ylab = "Estimated Probability",
subtitle = legend_title(gender_input, age_input),
title = "Estimated Probability for Class II de novo DSA Appearance",
font.title = c(16, "bold", "darkblue"),
font.x = c(14, "bold", "red"),
font.y = c(14, "bold", "darkred"),
font.tickslab = c(12, "bold"),
font.subtitle = c(12, "bold"),
legend = "top",
legend.title = "Donor Mismatches",
legend.labs = c(" < 30 Mismatches", " > 30 Mismatches")
)
ggsurv$plot = ggsurv$plot +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5))
ggsurv
gender_input = "Male"
age_input = "36 - 45"
survdt_m = readRDS("survdt_m.rds")
load("elastic.glm.v4.Rdata")
load("backup_model_v2.Rdata")
load("100_genes.rdata")
immune_elastic = readRDS("elastic_model_immune.RDS")
train_immune = readRDS("immune_gene_final_edit.RDS")
immune_status = readRDS("immune_status.rds")
edited_immune_elastic = readRDS("edited_elastic_model_immune.RDS")
user_survdt = survdt_m %>% dplyr::filter(
Gender == gender_input,
Age == age_input
)
user_kmcurve <- survfit(Surv(C2daystodnDSA, C2dnDSA) ~ Eplet2MM, data = user_survdt)
legend_title <- function(gender_input, age_input) {
legend_title = paste(gender_input, ":", age_input, "y.o.")
return(legend_title)
}
ggsurv <- ggsurvplot(
user_kmcurve, # survfit object with calculated statistics.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
palette = c("#E7B800", "#2E9FDF"),
caption = "Data Provided by Dr. Germain Wong (University of Sydney) \n DSA = Donor Specific Antibody",
ggtheme = theme_bw(), # customize plot and risk table with a theme.
risk.table.y.text.col = T,# colour risk table text annotations.
risk.table.height = 0.25, # the height of the risk table
risk.table.y.text = FALSE,# show bars instead of names in text annotations
# in legend of risk table.
surv.median.line = "hv",  # add the median survival pointer.
xlab = "Time (Years)",
ylab = "Estimated Probability",
subtitle = legend_title(gender_input, age_input),
title = "Estimated Probability for Class II de novo DSA Appearance",
font.title = c(16, "bold", "darkblue"),
font.x = c(14, "bold", "red"),
font.y = c(14, "bold", "darkred"),
font.tickslab = c(12, "bold"),
font.subtitle = c(12, "bold"),
legend = "top",
legend.title = "Donor Mismatches",
legend.labs = c(" < 30 Mismatches", " > 30 Mismatches")
)
ggsurv$plot = ggsurv$plot +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5))
ggsurv
mean_train<- mean(train_data_100)
inFile <- "./Patient_Data/GSM3406956_s2.txt"
#read.csv(inFile$datapath, header = input$header)
file<- read.delim(inFile, header = TRUE)
genes <- as.matrix(file[,1])
gse<- as.numeric(file[,-1])
gse<- data.matrix(gse)
rownames(gse) <- genes
counts <- gse
#getting the processed counts matrix
cpm_counts <- cpm(counts)
lcpm <- log2(cpm_counts+1)
data_counts<- normalizeQuantiles((lcpm))
#checks if ensemble id needs to be transformed
if (startsWith(genes[2], "E")){
rownames(data_counts) = sapply(strsplit(rownames(data_counts), ".", fixed=T), function(x) x[1])
symbols <- select(EnsDb.Hsapiens.v79, key= as.character(rownames(data_counts)), columns=c("SYMBOL"), keytype="GENEID")
df.gse<- as.data.frame(data_counts)
gse <- merge(df.gse, symbols, by.x = 0, by.y = 'GENEID', all.x = TRUE)
gene_symbols<- gse[,3]
data_counts <- as.matrix(gse[,2])
rownames(data_counts) <- gene_symbols
}
chooseGenes <- which(!duplicated(rownames(data_counts)))
gse<- data.matrix(data_counts[chooseGenes,])
ind <- which(rownames(gse) %in% as.array(sig_genes_100))
norm_factor <- mean_train/ mean(gse[ind,])
df <- as.matrix(gse[ind,] * norm_factor)
df2 <- df[order(rownames(df)), ]
X = (t(df2))
#us existing models
if (length(ind)==100){
predd_ar <- predict(elastic.glm, X, type="response")
}
#train another model
if (length(ind) != 100){
genes_present <- rownames(as.matrix(gse[ind,]))
ind <- which(rownames(train_data_100) %in% genes_present)
train = as.matrix(t(train_data_100[ind,]))
y <- ifelse(rejection_status_396_179_649=="Yes", 1,0)
data <- data.frame(y,train)
risk = c()
for (i in 1:5){
train_cont <- trainControl(method = "repeatedcv", number = 10, repeats = 5, search = "random", verboseIter = FALSE, returnData = FALSE)
elastic_reg <- train( y~., data = data, method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 5,
trControl = train_cont
)
elastic.glm2 <- glmnet(train, y, alpha = elastic_reg$bestTune[1,1], lambda =elastic_reg$bestTune[1,2]	,  family = "binomial")
predd_ar <- predict(elastic.glm2, X, type="response")
risk[i] = predd_ar
}
predd_ar <- mean(risk)
}
df <- data.frame(matrix(nrow=2, ncol = 2))
names(df) <- c("variable", "percentage")
df$variable <- c("pop_risk", "pred_risk")
df$percentage <- c(0.38, predd_ar)
df <- df %>% mutate(group=ifelse(percentage <0.28, "green",
ifelse(percentage>=0.28 & percentage<0.48, "orange","red")),
label=paste0(round(percentage*100), "%"),
title=dplyr::recode(variable, `pop_risk`="Population Risk of Acute Rejection",
`pred_risk`="Patient's Risk of Acute Rejection",
))
ggplot(df, aes(fill = group, ymax = percentage, ymin = 0, xmax = 2, xmin = 1)) +
geom_rect(aes(ymax=1, ymin=0, xmax=2, xmin=1), fill ="#ece8bd") +
geom_rect() +
coord_polar(theta = "y",start=-pi/2) + xlim(c(0, 2)) + ylim(c(0,2)) +
geom_text(aes(x = 0, y = 0, label = label, colour=group), size=6.5) +
geom_text(aes(x=0.8, y=1.45, label=title), size=4.2) +
facet_wrap(~title, ncol = 5) +
theme_void() +
scale_fill_manual(values = c("red"="#C9146C", "orange"="#DA9112", "green"="#129188")) +
scale_colour_manual(values = c("red"="#C9146C", "orange"="#DA9112", "green"="#129188")) +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
guides(fill=FALSE) +
guides(colour=FALSE)+
ggtitle("Risk of Acute Rejection")+
theme(plot.title = element_text(size=15, face="bold"))+
theme(plot.title = element_text(hjust = 0.5, colour = "dark blue"))
mean_train<- mean(as.matrix(train_immune))
file<- read.delim(inFile, header = TRUE)
genes <- as.matrix(file[,1])
gse<- as.numeric(file[,-1])
gse<- data.matrix(gse)
rownames(gse) <- genes
counts <- gse
#getting the processed counts matrix
#cpm_counts <- cpm(counts)
#lcpm <- log2(cpm_counts+1)
#data_counts<- normalizeQuantiles((lcpm))
data_counts <- counts
#checks if ensemble id needs to be transformed
if (startsWith(genes[2], "E")){
rownames(data_counts) = sapply(strsplit(rownames(data_counts), ".", fixed=T), function(x) x[1])
symbols <- select(EnsDb.Hsapiens.v79, key= as.character(rownames(data_counts)), columns=c("SYMBOL"), keytype="GENEID")
df.gse<- as.data.frame(data_counts)
gse <- merge(df.gse, symbols, by.x = 0, by.y = 'GENEID', all.x = TRUE)
gene_symbols<- gse[,3]
data_counts <- as.matrix(gse[,2])
rownames(data_counts) <- gene_symbols
}
chooseGenes <- which(!duplicated(rownames(data_counts)))
gse<- data.matrix(data_counts[chooseGenes,])
ind <- which(rownames(gse) %in% as.array(rownames(train_immune)))
norm_factor <- mean_train/ mean(gse[ind,])
df <- as.matrix(gse[ind,] * norm_factor)
df2 <- df[order(rownames(df)), ]
X = (t(df2))
#us existing models
if (length(ind)==nrow(train_immune)){
predd_im <- predict(immune_elastic, X, type="response")
}
#train another model
if (length(ind) != nrow(train_immune)){
genes_present <- rownames(as.matrix(gse[ind,]))
ind <- which(rownames(train_immune) %in% genes_present)
train = as.matrix(t(train_immune[ind,]))
y <- ifelse(immune_status=="Immunotherapy", 0,1)
data <- data.frame(y,train)
risk = c()
for (i in 1:5){
train_cont <- trainControl(method = "repeatedcv", number = 10, repeats = 5, search = "random", verboseIter = FALSE, returnData = FALSE)
elastic_reg <- train( y~., data = data, method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 5,
trControl = train_cont
)
elastic.glm2 <- glmnet(train, y, alpha = elastic_reg$bestTune[1,1], lambda =elastic_reg$bestTune[1,2]	,  family = "binomial")
predd_im <- predict(elastic.glm2, X, type="response")
risk[i] = predd_im
}
predd_im <- mean(risk)
}
df <- data.frame(matrix(nrow=2, ncol = 2))
names(df) <- c("variable", "percentage")
df$variable <- c("pop_risk", "pred_risk")
df$percentage <- c(0.85, im_prediction())
mean_train<- mean(as.matrix(train_immune))
file<- read.delim(inFile, header = TRUE)
genes <- as.matrix(file[,1])
gse<- as.numeric(file[,-1])
gse<- data.matrix(gse)
rownames(gse) <- genes
counts <- gse
#getting the processed counts matrix
#cpm_counts <- cpm(counts)
#lcpm <- log2(cpm_counts+1)
#data_counts<- normalizeQuantiles((lcpm))
data_counts <- counts
#checks if ensemble id needs to be transformed
if (startsWith(genes[2], "E")){
rownames(data_counts) = sapply(strsplit(rownames(data_counts), ".", fixed=T), function(x) x[1])
symbols <- select(EnsDb.Hsapiens.v79, key= as.character(rownames(data_counts)), columns=c("SYMBOL"), keytype="GENEID")
df.gse<- as.data.frame(data_counts)
gse <- merge(df.gse, symbols, by.x = 0, by.y = 'GENEID', all.x = TRUE)
gene_symbols<- gse[,3]
data_counts <- as.matrix(gse[,2])
rownames(data_counts) <- gene_symbols
}
chooseGenes <- which(!duplicated(rownames(data_counts)))
gse<- data.matrix(data_counts[chooseGenes,])
ind <- which(rownames(gse) %in% as.array(rownames(train_immune)))
norm_factor <- mean_train/ mean(gse[ind,])
df <- as.matrix(gse[ind,] * norm_factor)
df2 <- df[order(rownames(df)), ]
X = (t(df2))
#us existing models
if (length(ind)==nrow(train_immune)){
predd_im <- predict(immune_elastic, X, type="response")
}
#train another model
if (length(ind) != nrow(train_immune)){
genes_present <- rownames(as.matrix(gse[ind,]))
ind <- which(rownames(train_immune) %in% genes_present)
train = as.matrix(t(train_immune[ind,]))
y <- ifelse(immune_status=="Immunotherapy", 0,1)
data <- data.frame(y,train)
risk = c()
for (i in 1:5){
train_cont <- trainControl(method = "repeatedcv", number = 10, repeats = 5, search = "random", verboseIter = FALSE, returnData = FALSE)
elastic_reg <- train( y~., data = data, method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 5,
trControl = train_cont
)
elastic.glm2 <- glmnet(train, y, alpha = elastic_reg$bestTune[1,1], lambda =elastic_reg$bestTune[1,2]	,  family = "binomial")
predd_im <- predict(elastic.glm2, X, type="response")
risk[i] = predd_im
}
predd_im <- mean(risk)
}
df <- data.frame(matrix(nrow=2, ncol = 2))
names(df) <- c("variable", "percentage")
df$variable <- c("pop_risk", "pred_risk")
df$percentage <- c(0.85, predd_im)
df <- df %>% mutate(group=ifelse(percentage <0.20, "green",
ifelse(percentage>=0.20 & percentage<0.70, "orange","red")),
label=paste0(round(percentage*100), "%"),
title=dplyr::recode(variable, `pop_risk`="Percentage of Population Relying on Immunosuppression",
`pred_risk`="Patient's Predicted Reliance on Immunosuppression",
))
ggplot(df, aes(fill = group, ymax = percentage, ymin = 0, xmax = 2, xmin = 1)) +
geom_rect(aes(ymax=1, ymin=0, xmax=2, xmin=1), fill ="#ece8bd") +
geom_rect() +
coord_polar(theta = "y",start=-pi/2) + xlim(c(0, 2)) + ylim(c(0,2)) +
geom_text(aes(x = 0, y = 0, label = label, colour=group), size=6.5) +
geom_text(aes(x=0.8, y=1.45, label=title), size=4.2) +
facet_wrap(~title, ncol = 5) +
theme_void() +
scale_fill_manual(values = c("red"="#C9146C", "orange"="#DA9112", "green"="#129188")) +
scale_colour_manual(values = c("red"="#C9146C", "orange"="#DA9112", "green"="#129188")) +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
guides(fill=FALSE) +
guides(colour=FALSE)+
ggtitle("Reliance on Immunosuppression")+
theme(plot.title = element_text(size=15, face="bold"))+
theme(plot.title = element_text(hjust = 0.5, colour = "dark blue")
)
library(GEOquery)
library(R.utils)
library(reshape2)
library(ggplot2)
library(limma)
library(biomaRt)
library(ggbiplot)
library(factoextra)
library(caret)
library(glmnet)
library(DESeq2)
library(edgeR)
library(DEFormats)
library(ROCR)
library(pROC)
library(doParallel)
library(foreach)
library(DescTools)
library(ggthemes)
library(class)
library(rsconnect)
library(BiocManager)
library(affy)
library(oligo)
# library(pd.mogene.2.0.st)
# library(mogene20sttranscriptcluster.db)
library(stringr)
# library(dashboardthemes)
library(survminer)
library(survival)
library(survMisc)
library(EnsDb.Hsapiens.v79)
options(repos = BiocManager::repositories())
install.packages("ggfittext")
mean_train<- mean(as.matrix(train_immune))
inFile <- "./Patient_Data/GSM3406956_s2.txt"
file<- read.delim(inFile, header = TRUE)
genes <- as.matrix(file[,1])
gse<- as.numeric(file[,-1])
gse<- data.matrix(gse)
rownames(gse) <- genes
counts <- gse
#getting the processed counts matrix
#cpm_counts <- cpm(counts)
#lcpm <- log2(cpm_counts+1)
#data_counts<- normalizeQuantiles((lcpm))
data_counts <- counts
#checks if ensemble id needs to be transformed
if (startsWith(genes[2], "E")){
rownames(data_counts) = sapply(strsplit(rownames(data_counts), ".", fixed=T), function(x) x[1])
symbols <- select(EnsDb.Hsapiens.v79, key= as.character(rownames(data_counts)), columns=c("SYMBOL"), keytype="GENEID")
df.gse<- as.data.frame(data_counts)
gse <- merge(df.gse, symbols, by.x = 0, by.y = 'GENEID', all.x = TRUE)
gene_symbols<- gse[,3]
data_counts <- as.matrix(gse[,2])
rownames(data_counts) <- gene_symbols
}
